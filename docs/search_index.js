(function () {
  window.DENO_DOC_SEARCH_INDEX = {"nodes":[{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"BaseEncoding","file":".","doc":"Base encoding alternatives","url":"././~/BaseEncoding.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"CryptoAlgorithm","file":".","doc":"Crypto identifier values that are relevant for this package. \"rsa\" is an alias for \"rsa-pss\";\n\"ed25519\" is an alias for \"eddsa\".\n\nOnly \"rsa-oaep\" can be used for encryption/decryption, but it cannot be used for signatures. All the\nothers can only be used for signature and verification.","url":"././~/CryptoAlgorithm.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"CryptoPublicKey","file":".","doc":"Used to overload the key argument for verify and encrypt operations","url":"././~/CryptoPublicKey.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"CryptoSecretKey","file":".","doc":"Used to overload the key argument for sign and decrypt operations. Note that a plain Multibase is not an option; the\nmultikey secret key alone may not contain all necessary information.","url":"././~/CryptoSecretKey.html","deprecated":false},{"kind":[{"char":"T","kind":"TypeAlias","title":"Type Alias"}],"name":"HashAlgorithm","file":".","doc":"Crypto hash values that are used for this package. \"SHA-256\" is the usual default.","url":"././~/HashAlgorithm.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"JWKKeyPair","file":".","doc":"","url":"././~/JWKKeyPair.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JWKKeyPair.publicKeyJwk","file":".","doc":"","url":"././~/JWKKeyPair.publicKeyJwk.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"JWKKeyPair.secretKeyJwk","file":".","doc":"","url":"././~/JWKKeyPair.secretKeyJwk.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"JWKKeyPairToCrypto","file":".","doc":"Convert a public/private key pair in JWK to WebCrypto's binary representation.\n","url":"././~/JWKKeyPairToCrypto.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"JWKToCrypto","file":".","doc":"Convert a JWK key representation of a Key to WebCrypto's representation.\n","url":"././~/JWKToCrypto.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"KeyOptions","file":".","doc":"Options to specify details for keys, i.e., the underlying algorithms.","url":"././~/KeyOptions.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"KeyOptions.namedCurve","file":".","doc":"Choice of elliptic curve; relevant for ecdsa. Defaults to \"P-256\".","url":"././~/KeyOptions.namedCurve.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"KeyOptions.hash","file":".","doc":"Hash algorithm for internal use; relevant for \"rsa-pss\" and rsa-oaep\". Defaults to \"SHA-256\".","url":"././~/KeyOptions.hash.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"KeyOptions.saltLength","file":".","doc":"Used by rsa-pss to make the signature more secure. Defaults to 32 and cannot be set externally.","url":"././~/KeyOptions.saltLength.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"KeyOptions.modulusLength","file":".","doc":"RSA key modulus, relevant to RSA keys. Can be 1024, 2048, or 4096. Defaults to 2048.","url":"././~/KeyOptions.modulusLength.html","deprecated":false},{"kind":[{"char":"I","kind":"Interface","title":"Interface"}],"name":"OutputOptions","file":".","doc":"Options for the output of signing/verifying and for encryption/decryption.\n\nThe defaults are dependent on the key encoding: base58 and multibase for Multikeys, base64 and plain otherwise.","url":"././~/OutputOptions.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"OutputOptions.encoding","file":".","doc":"Base encoding choice for the generated signature. Can be base64 or base58","url":"././~/OutputOptions.encoding.html","deprecated":false},{"kind":[{"char":"p","kind":"Property","title":"Property"}],"name":"OutputOptions.format","file":".","doc":"Format of the final signature: plain encoded text, or Multibase","url":"././~/OutputOptions.format.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"cryptoToJWKPair","file":".","doc":"Convert a WebCrypto public/private key pair to JWK.\n","url":"././~/cryptoToJWKPair.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"decrypt","file":".","doc":"Decrypt a ciphertext.\n\nThe option should be identical to the value used (if any) for signature, except that,\nif the signature option refers to multibase, the values of encoding is ignored (and is deduced from the\nmultibase itself).\n","url":"././~/decrypt.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"encrypt","file":".","doc":"Encrypt a message.\n\nThe generated ciphertext can be encoded\n\n* as plain string, with the value encoded, by default, in base64 or, on request, in base58.\n* as a Multibase string, with the value encoded, by default, in base58 or, on request, in base64.\n\nDefault is plain string with base64.\n","url":"././~/encrypt.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"generateKeys","file":".","doc":"Generate a private/public key pair in one of the ecdsa/eddsa/RSA crypto algorithms (the term Ed25519 can also be used\nfor eddsa). The result is the WebCrypto format for keys.\n\nSome of the algorithms can be (optionally) parametrized through the key options:\n\n* For ecdsa: the `nameCurve` field can be set to `\"P-256\"` or `\"P-384\"` to change the EC curve. Default is `\"P-256\"`\n* For RSA:\n    * can be set to the modulus length of the key can be set with `modulusLength`. Value can be 1024, 2048, or 4096;\n    default is 2048\n    * the `hash` value can be set to `\"SHA-256\"` or `\"SHA-384\"`; default is \"SHA-256\"`\n\n","url":"././~/generateKeys.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"generateKeysJWK","file":".","doc":"Generate a new public/private key pair in one of the ecdsa/eddsa/RSA crypto algorithms\n(the term Ed25519 can also be used for eddsa). The result is a pair or JWK format for keys.\n\nSome of the algorithms can be (optionally) parametrized through the key options:\n\n* For ecdsa: the `nameCurve` field can be set to `\"P-256\"` or `\"P-384\"` to change the EC curve. Default is `\"P-256\"`\n* For RSA:\n    * can be set to the modulus length of the key can be set with `modulusLength`. Value can be 1024, 2048, or 4096;\n    default is 2048\n    * the `hash` value can be set to `\"SHA-256\"` or `\"SHA-384\"`; default is \"SHA-256\"`\n","url":"././~/generateKeysJWK.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"generateKeysMK","file":".","doc":"Generate a new public/private key pair in one of the ecdsa or eddsa crypto algorithms\n(the term Ed25519 can also be used for eddsa). The result is a pair or Multibase formatted keys, i.e., in Multikey.\n\nEcdsa can be (optionally) parametrized through the key options: the `nameCurve` field can be set to `\"P-256\"`\nor `\"P-384\"` to change the EC curve. Default is `\"P-256\"`\n","url":"././~/generateKeysMK.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"hash","file":".","doc":"Calculate Hash of a string\n","url":"././~/hash.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"sign","file":".","doc":"Sign a message.\n\nThe signature can be encoded\n\n* as plain string, with the value encoded, by default, in base64 or, on request, in base58\n* as a Multibase string, with the value encoded, by default, in base58 or, on request, in base64\n\nDefault for Multikeys is multibase with base58; plain string with base64 otherwise.\n","url":"././~/sign.html","deprecated":false},{"kind":[{"char":"f","kind":"Function","title":"Function"}],"name":"verify","file":".","doc":"Verify a signature.\n\nThe option should be identical to the value used (if any) for signature, except that,\nif the signature option refers to multibase, the values of encoding is ignored (and is deduced from the\nmultibase itself).\n","url":"././~/verify.html","deprecated":false}]};
})()